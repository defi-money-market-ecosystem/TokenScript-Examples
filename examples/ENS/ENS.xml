<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE token  [
        <!ENTITY style SYSTEM "shared.css">
        <!ENTITY release.en SYSTEM "release.en.js">
        <!ENTITY subdomain.en SYSTEM "subdomainBundle.en.js">
        <!ENTITY renew.en SYSTEM "renew.en.js">
        <!ENTITY records.en SYSTEM "recordsBundle.en.js">
        ]>
<ts:token xmlns:ts="http://tokenscript.org/2020/03/tokenscript"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:xml="http://www.w3.org/XML/1998/namespace"
          xsi:schemaLocation="http://tokenscript.org/2020/03/tokenscript http://tokenscript.org/2020/03/tokenscript.xsd"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:asnx="urn:ietf:params:xml:ns:asnx"
          xmlns:ethereum="urn:ethereum:constantinople"
          custodian="false"
>
  <ts:name>
    <ts:plurals xml:lang="en">
      <ts:string quantity="one">ENS</ts:string>
    </ts:plurals>
  </ts:name>
  <ts:contract interface="erc721" name="ENS">
    <ts:address network="1">0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85</ts:address>
  </ts:contract>
  <ts:contract name="registry">
    <ts:address network="1">0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e</ts:address>
  </ts:contract>
  <ts:contract name="PublicResolver">
    <ts:address network="1">0xDaaF96c344f63131acadD0Ea35170E7892d3dfBA</ts:address>
  </ts:contract>

  <!-- emitted via: function registerWithConfig(string memory name, address owner, uint duration, bytes32 secret, address resolver, address addr) public payable -->
  <ts:contract name="ETHRegistrarController">
    <ts:address network="1">0x283af0b28c62c092c9727f1ee09c02ca627eb7f5</ts:address>
    <asnx:module name="NameRegistered">
      <sequence>
        <element name="name" ethereum:type="string"/>
        <element name="label" ethereum:type="bytes32" ethereum:indexed="true"/>
        <element name="owner" ethereum:type="address" ethereum:indexed="true"/>
        <element name="cost" ethereum:type="uint"/>
        <element name="expires" ethereum:type="uint"/>
      </sequence>
    </asnx:module>
  </ts:contract>
  <ts:origins>
    <!-- Define the contract which holds the token that the user will use -->
    <ts:ethereum contract="ENS">
    </ts:ethereum>
  </ts:origins>

  <ts:cards>
    <!-- TODO Re add when selection is working properly (you can only do this if you have held for on year -->
<!--    <ts:action>-->
<!--      <ts:name>-->
<!--        <ts:string xml:lang="en">Refund</ts:string>-->
<!--      </ts:name>-->
<!--      <ts:transaction>-->
<!--        <ts:ethereum function="releaseDeed" contract="ENS">-->
<!--          <ts:data>-->
<!--            <ts:bytes32 ref="tokenId"/>-->
<!--          </ts:data>-->
<!--        </ts:ethereum>-->
<!--      </ts:transaction>-->
<!--      <ts:view xml:lang="en">-->
<!--        <xhtml:style type="text/css">&style;</xhtml:style>-->
<!--        <xhtml:script type="text/javascript">&release.en;</xhtml:script>-->
<!--      </ts:view>-->
<!--    </ts:action>-->

    <ts:action>
      <ts:name>
        <ts:string xml:lang="en">Records</ts:string>
      </ts:name>

      <ts:attribute-type id="node" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">node</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="bytes"/>
        </ts:origins>
      </ts:attribute-type>

      <ts:attribute-type id="key" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">key</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="utf8"/>
        </ts:origins>
      </ts:attribute-type>

      <ts:attribute-type id="value" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">value</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="utf8"/>
        </ts:origins>
      </ts:attribute-type>

      <ts:attribute-type id="emailRecord" syntax="1.3.6.1.4.1.1466.115.121.1.15">
        <ts:origins>
          <ts:ethereum function="text" contract="PublicResolver" as="utf8">
            <ts:data>
              <ts:bytes32 ref="node"/>
              <ts:string>email</ts:string>
            </ts:data>
          </ts:ethereum>
        </ts:origins>
      </ts:attribute-type>

      <ts:transaction>
        <ts:ethereum function="setText" contract="PublicResolver" as="bool">
          <ts:data>
            <ts:bytes32 ref="node"/>
            <ts:string>email</ts:string>
            <ts:string ref="value"/>
          </ts:data>
        </ts:ethereum>
      </ts:transaction>

      <ts:view xml:lang="en">
        <xhtml:style type="text/css">&style;</xhtml:style>
        <xhtml:script type="text/javascript">&records.en;</xhtml:script>
      </ts:view>

    </ts:action>

    <ts:action>
      <ts:name>
        <ts:string xml:lang="en">Renew</ts:string>
      </ts:name>

      <ts:attribute-type id="renewalPricePerYear" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">renewal price per year</ts:string>
        </ts:name>
        <ts:origins>
          <ts:ethereum function="rentPrice" contract="ETHRegistrarController" as="uint">
            <ts:data>
              <ts:string ref="ensName"/>
              <ts:uint256>31556952</ts:uint256>
            </ts:data>
          </ts:ethereum>
        </ts:origins>
      </ts:attribute-type>

      <ts:transaction>
        <ts:ethereum function="renew" contract="ETHRegistrarController" as="uint">
          <ts:value ref="renewalPricePerYear"/>
          <ts:data>
            <ts:string ref="ensName"/>
            <ts:uint256>31556952</ts:uint256>
          </ts:data>
        </ts:ethereum>
      </ts:transaction>
      <ts:view xml:lang="en">
        <xhtml:style type="text/css">&style;</xhtml:style>
        <xhtml:script type="text/javascript">&renew.en;</xhtml:script>
      </ts:view>
    </ts:action>

    <ts:action>
      <ts:name>
        <ts:string xml:lang="en">Add Subdomain</ts:string>
      </ts:name>

      <ts:attribute-type id="node" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">node</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="bytes"/>
        </ts:origins>
      </ts:attribute-type>

      <ts:attribute-type id="subdomainHash" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">subdomainHash</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="bytes"/>
        </ts:origins>
      </ts:attribute-type>

      <ts:attribute-type id="owner" syntax="1.3.6.1.4.1.1466.115.121.1.36">
        <ts:name>
          <ts:string xml:lang="en">owner</ts:string>
        </ts:name>
        <ts:origins>
          <ts:user-entry as="address"/>
        </ts:origins>
      </ts:attribute-type>
      <ts:transaction>
        <ts:ethereum function="setSubnodeRecord" contract="registry">
          <ts:data>
            <ts:bytes32 ref="node"/>
            <ts:bytes32 ref="subdomainHash"/>
            <ts:address ref="owner"/>
            <!-- default resolver TODO this might fail for people who set their own resolvers...-->
            <ts:address>0xDaaF96c344f63131acadD0Ea35170E7892d3dfBA</ts:address>
            <!-- TTL, set to 0 -->
            <ts:uint64>0</ts:uint64>
          </ts:data>
        </ts:ethereum>
      </ts:transaction>

      <ts:view xml:lang="en">
        <xhtml:style type="text/css">&style;</xhtml:style>
        <xhtml:script type="text/javascript">&subdomain.en;</xhtml:script>
      </ts:view>
    </ts:action>

  </ts:cards>

  <ts:attribute-type id="ensName" syntax="1.3.6.1.4.1.1466.115.121.1.15">
    <ts:origins>
      <ts:ethereum event="NameRegistered" filter="label=${tokenId}" select="name"/>
    </ts:origins>
  </ts:attribute-type>

  <ts:attribute-type id="nameExpires" syntax="1.3.6.1.4.1.1466.115.121.1.36">
    <ts:origins>
      <ts:ethereum function="nameExpires" contract="ENS" as="uint">
        <ts:data>
          <ts:uint256 ref="tokenId"/>
        </ts:data>
      </ts:ethereum>
    </ts:origins>
  </ts:attribute-type>

</ts:token>
